Bad string of characters:    assert( isValidResultString("------") == false);
Bad string of characters:     assert( isValidResultString("++++++") == false);
Correct string of characters:     assert( isValidResultString("R2000+1000-1000") == true);
Tests don’t add up:     assert( isValidResultString("R2002+3-1") == false);
Empty space:     assert( isValidResultString(" ") == false);
Bad string of single character:   assert( isValidResultString("+") == false);
No total:     assert( isValidResultString("R+5-3") == false);
Unwanted character:     assert( isValidResultString("RF5+3-2") == false);
No ‘R’:     assert( isValidResultString("+3-1") == false);
Lowercase:     assert( isValidResultString("r1+0-1") == false);
Missing negative tests:   assert( isValidResultString("R1+1-") == false);
Random characters:    assert( isValidResultString("R1+0-1   asdfR") == false);
Leading zeroes:    assert( isValidResultString("R5+00003-0002") == false);
Numbers don’t add up:    assert( isValidResultString("R5+0-0") == false);
Unwanted space characters:    assert( isValidResultString("R3-1+2   ") == false);
No leading zeroes/tests cannot equal 0:    assert( isValidResultString("R2-1+1R0+0-0") == false);
Double negative tests:    assert( isValidResultString("R5-3-2R2+2+0") == false);
Unwanted characters:     assert( isValidResultString("R1abcdefg+0-1") == false);
Reverse string:    assert( isValidResultString("1-3+4R") == false);
Too many + signs, UNDER the minimum 6 character count:    assert( isValidResultString("+++") == false);
Too many + signs,  OVER the minimum 6 character count:    assert( isValidResultString("++++++++") == false);
Too many ‘R’s in a row:    assert( isValidResultString("RRR") == false);
Single zero:    assert( isValidResultString("0") == false);
Incomplete batch:    assert( isValidResultString("R0") == false);
Numbers don’t add up:    assert( isValidResultString("R2-0+0") == false);
Leading zeroes:    assert(isValidResultString("R20+01-019") == false);
True case:    assert(isValidResultString("R200+100-100R5-3+2") == true);
Empty string:    assert( isValidResultString("") == false );
True case:    assert( isValidResultString( "R2+1-1" ) == true );
Bad characters:    assert( isValidResultString( "shjdkasjdjskhd" ) == false );
Bad character:    assert( isValidResultString( "." ) == false );
Star wars (why not?):   assert( isValidResultString( "R2D2" ) == false );
Double positive:    assert( isValidResultString( "R2+1+1R5-3+2" ) == false );
No positive case:    assert( isValidResultString("R5-32") == false);
No positive case:    assert( isValidResultString("R5-3+2R6+4-2R15-14") == false);
Spaces and too many ‘-’ characters:    assert( isValidResultString("-- -- -") == false);
Testing the addition:    assert( positiveTests("R5-3+2R6+4-2R15-14+1") == 7);
False:    assert( positiveTests("R5-3-2R6+4-2R15-14+1") == -1);
False:    assert( positiveTests("R5-3+45R6+4-2R15-14+1") == -1);
Correct addition:    assert( positiveTests("R5-4+1R8+4-4") == 5);
Faulty input:    assert( positiveTests( "    " ) == -1 );
Faulty input:      assert( negativeTests( "      " ) == -1 );
Faulty input:      assert( totalTests( "      " ) == -1 );
Faulty input:      assert( batches( "      " ) == -1 );
Testing addition:    assert( positiveTests( "R2+1-1" ) == 1 );
Testing addition:    assert( negativeTests( "R5+1-4" ) == 4 );
Faulty input:    assert( negativeTests( "R5+1-4R6-3-3" ) == -1 );
Testing addition:    assert( negativeTests( "R8-4+4R9+5-4" ) == 8 );
True total:    assert( totalTests( "R2+1-1" ) == 2 );
Faulty total:    assert( totalTests( "R+1-1" ) == -1 );
True total:    assert( totalTests( "R5-1+4R8+5-3R10+5-5R1000+5-995" ) == 1023 );
Testing batch count:   assert( batches( "R2+1-1" ) == 1 );
Faulty string for batches:     assert (batches("R") == -1);
Faulty string for batches:     assert (batches("sjhda,skjd") == -1);
Faulty string for batches:     assert (batches("---") == -1);
Faulty string for batches:     assert (batches("+++++++") == -1);
Faulty string for batches:     assert (batches("R5") == -1);
Testing batch count:    assert (batches("R5-3+2R6-4+2R10+8-2") == 3);
Faulty string for batches:    assert (batches("R5-3+2R6-4+2R10+8-2R5-3+2R6-4+2R10+8-2R5-3+2R6+4+2R10+8-2") == -1);
Testing batch count:    assert (batches("R5-3+2R6-4+2R10+8-2R5-3+2R6-4+2R10+8-2R5-3+2R6-4+2R10+8-2R6-4+2R6-4+2R6-4+2") == 12);
Testing batch count:    assert( batches("R5+3-2R1+0-1R1+1-0") == 3);


